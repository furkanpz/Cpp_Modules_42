Stack sınıfının template <class T, class Container = std::deque<T>> sözdizimi, deque'i temel kapsayıcı olarak belirtir. Bu, stack nesnesinin, deque'in tüm özelliklerini miras aldığını gösterir.

class MutantStack : public std::stack<T, container> ifadesi, MutantStack sınıfının std::stack sınıfından miras aldığını belirtir. Bu, MutantStack'in std::stack'in işlevselliğini devraldığı ve özelleştirebileceği anlamına gelir.

Iterator:
iterator, bir veri yapısı üzerinde gezinmek ve elemanları değiştirmek için kullanılır.
Değiştirilebilir verilere erişim sağlar.
Örneğin, bir dizi üzerinde dolaşırken, iterator kullanarak dizinin elemanlarını okuyabilir ve değiştirebilirsiniz.

Const_iterator:
const_iterator, bir veri yapısı üzerinde gezinirken elemanları değiştirmenize izin vermez.
Sadece elemanları okumak için kullanılır.
Bu, verilerin değiştirilmemesi gereken durumlarda kullanışlıdır.

Reverse_iterator:
reverse_iterator, bir veri yapısını tersten (sondan başa) dolaşmak için kullanılır.
Bu, özellikle bir veri yapısının sonundan başlayarak geriye doğru ilerlemeniz gereken durumlarda kullanışlıdır.

Const_reverse_iterator:
const_reverse_iterator, bir veri yapısını tersten dolaşırken elemanları değiştirmenize izin vermez.
Sadece elemanları okumak için kullanılır ve tersten dolaşır.





SORU -> std::stack<T, std::vector<T>  burada vector ne işe yaramaktadır
std::stack sınıfı, içindeki verileri saklamak için genellikle varsayılan olarak std::deque (double-ended queue) konteynerini kullanır. Ancak, std::stack sınıfının ikinci bir konteyner türü ile kullanılabilmesi için kullanıcı tarafından özelleştirilebilir.

Örneğinizde, std::stack sınıfı std::vector konteynerini kullanacak şekilde özelleştirilmiş. Bu, std::stack'in içindeki verilerin std::vector ile saklandığı anlamına gelir. std::vector konteyneri, dinamik bir dizi gibi davranır ve verileri bellekte ardışık bir şekilde saklar. Bu, verilere hızlı erişim sağlar, ancak öğeler eklenip çıkarıldığında bazı maliyetlerle (yer değiştirme, yeniden boyutlandırma) gelir.

Bu tür bir özelleştirme, std::stack sınıfını kullanırken altta yatan veri yapısını belirli bir ihtiyaca göre değiştirmek istediğinizde kullanışlıdır. Özellikle belirli bir performans veya bellek kullanımı gereksinimine sahipseniz, std::stack sınıfını std::vector veya başka bir konteyner türü ile özelleştirebilirsiniz.

Özetle, std::stack sınıfının ikinci şablon parametresi (std::vector<T>), içindeki verilerin nasıl saklandığını belirler ve std::stack sınıfının kullanımı sırasında bu özelleştirmenin etkilerini gözlemleyebilirsiniz.